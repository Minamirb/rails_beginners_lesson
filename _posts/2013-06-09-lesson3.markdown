---
layout: default
title: 初心者レッスン　lesson3
permalink: rails3.2/lesson3
---

# Lesson3

---

### <span class="icon-leaf"></span> Lesson2の復習

使ったコマンド

{% highlight sh %}
$ rake routes
$ rails generate model テーブル名 カラム:データ型
$ rake db:migrate
$ rails generate controller コントローラー名s #コントローラー名は複数形で書くこと！
{% endhighlight %}

編集したファイル

* config/routes.rb
* app/models以下の各ファイル
* app/views以下の各ファイル
* app/controllers以下の各ファイル

これらのファイルの関係性、覚えてますか？
[Rails内の役割分担]({{site.baseurl}}rails3.2/lesson1#gem_roles)

---

### <span class="icon-leaf"></span> 今日は見た目（デザイン）を整えるお話

webアプリである以上、やっぱり見た目は大事ですね。  
どこかの企業ホームページなどはともかく、個人サイトや社内アプリで使うぐらいなら著作権フリーのデザインがいろいろあるので、どんどん活用しましょう。

また、ここではLesson3でデザインを取り上げましたが、適応させるタイミングはもっと早くてもいいと思います。  
見た目がきれいなところにいろいろ実装していくほうが完成イメージが湧きやすいし、実装していてもテンションがあがると思います。

---

### <span class="icon-leaf"></span > I18nの設定

Railsでのデフォルトの表示言語は英語です。  
ちょっとぐらい英語でも、、、と思わなくはないのですが、せっかく使えるエラーメッセージも全部英語になってしまいますので、そこは日本語にしておきましょう。

* ここ[ Github svenfuchs/rails-i18n ](https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale)から日本語の元ネタja.ymlをコピー

* config/locales/ にja.ymlとして作成

* config/locales/ja.ymlを編集 `インデントに注意しましょう`  
例：Animeクラス（テーブル）にnameというフィールド（カラム）がある場合。

ja.yml
{% highlight sh %}
  activerecord:
    errors:
      template:
  # 省略
    attributes:
      anime:
        name: 名前
{% endhighlight %}

* config/application.rbを編集

application.rb
{% highlight ruby %}
  # config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.{rb,yml}').to_s]
  config.i18n.default_locale = :ja #:enを:jaに変更
{% endhighlight %}

これでviews/animes/_form.html.erb等でページを表示してみましょう。

フィールド（カラム）のタイトルが日本語になればOKです。

---

### <span class="icon-leaf"></span > デザインのfix

ソースの置き場所が決まっています。

      *  html                     => app/views/
      *  scss(css)                => app/assets/stylesheets/
      *  coffeescript(javascript) => app/assets/stylesheets/
      *  image                    => app/assets/images

表示の統括をしているのはapp/views/layouts/application.html.erbです。

application.html.erbに記述されている<%= yield %>部分に、各viewのhtmlが入ることになります。

![Rails Folders]({{site.baseurl}}/img/rails_application_html.png "Rails Folders")

手順として、

* 全体のデザインをapplication.html.erbをベースに、application.cssに配置
* 必要なものを誤って消してないか、こまめにブラウザでチェック
* imageファイルは、gif,png,jpgがOK  
例：imageファイルの呼び方

{% highlight ruby %}
<%= image_tag('line.png') %>
{% endhighlight %}

* Railsがサポートしているerbの機能は、置き換えておくと後々便利  
例：<a></a>（aタグ）は、<% %>（erbタグ）でlink_toに置き換え

<br />

> 著作権のゆるいフリーデザインがおいてあるサイト

[freeCSStemplates.org](http://www.freecsstemplates.org/css-templates/)  
[openwebdesign](http://www.openwebdesign.org)  
[css creme](http://csscreme.com)  
[PSDFAN](http://psd.fanextra.com/articles/34-free-beautiful-xhtmlcss-templates/)

などなど

---

### <span class="icon-leaf icon-sccess"></span> twitter bootstrapを使う

シンプルでいいなら、ちまたで流行のtwitter bootsttrapならhtmlのclassを指定するだけでよく、早くて使い勝手もいいと思います。

* 本家サイト [twitter bootstrap](http://twitter.github.io/bootstrap/index.html)
* Railsで利用する場合の解説 [RAILS CAST](http://railscasts.com/episodes/328-twitter-bootstrap-basics)

Railsで使う場合は、専用のgemが必要です。
ここでは[twitter-bootstrap-rails](https://github.com/seyhunak/twitter-bootstrap-rails)を使う方法を解説します。

* Gemfileを編集
{% highlight sh %}
group :assets do
#省略
  gem 'twitter-bootstrap-rails' #追記
  gem 'therubyracer' #追記
  gem 'less-rails' #追記
end
{% endhighlight %}

* gemのインストール
{% highlight sh %}
$ bundle install
{% endhighlight %}

* twitter bootstrap用のcssやjsのインストール
{% highlight sh %}
$ rails generate bootstrap:install
{% endhighlight %}

* app/views/layouts/application.html.erbの編集

application.html.erb
{% highlight ruby %}
<body>
  #ここから
  <div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
      <div class="container">
        <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </a>
        <% link_to "Book shelf", books_path, class: "brand" %>
        <div class="nav-collapse">
          <ul class="nav">
            <li><%= link_to "Publisher", publishers_path %></li>
          </ul>
        </div>
      </div>
    </div>
  </div>
  #ここまで追記

  #省略

  <div class="container"> #追記(yieldをdivで囲む)
    <%= yield %>
  </div> #追記
</body>
{% endhighlight %}

これでブラウザで確認してみましょう。

あとは、本家サイトのボタンやレイアウト例を見ながら、いろいろ試してみてください。

---

### <span class="icon-leaf icon-sccess"></span> おまけ

> newやeditページから直接indexページへ移す方法

例：animes#new -> create から animes#indexへ

app/controllers/animes_controller.rb
{% highlight ruby %}
def create
  @anime = Anime.new(params[:anime])

    respond_to do |format|
      if @anime.save
        format.html { redirect_to animes_path } #編集
        format.json { render json: @anime, status: :created, location: @anime }
      #省略
    end
  end
{% endhighlight %}

<br />

> サイト入り口のwelcomeページを作成する方法（controllerとviewだけ追加する方法）

* welcome controllerでindexとして表示するとして
{% highlight sh %}
$ rails generate controller welcome index
{% endhighlight %}

* public/index.htmlファイルを削除

* config/routes.rbを編集

routes.rb
{% highlight ruby %}
root:to => "welcome#index"
{% endhighlight %}

---

#### Lesson3はここまでです。おつかれさまでした <span class="icon-music"></span>
